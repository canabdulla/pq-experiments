M = $M
centroids = $centroids
dataset = $dataset
pq = $pq
sep = $sep

dir="./data/ml/"
print(toString(dir + dataset))
X = read(dir + dataset + "_X.csv") #, data_type="matrix", format="csv");
y = read(dir + dataset + "_y.csv") #, data_type="matrix", format="csv");


if(pq) {
  #pad the data if columns are not divisible by M
  if(ncol(X) %% M != 0) {
      zeros = matrix(0, rows=nrow(X), cols= ((ncol(X) %/% M) +1) * M - ncol(X) )
      X = cbind(X, zeros)
  }
  print(toString("Starting Clustering with parameters: M=" + M + " centroids=" + centroids + " sep=" + sep))
  [codebook, X] = quantizeByCluster(X, M, centroids, 1, 100, 1e-4, nrow(X) %/% centroids, sep, 2)
  print(toString("Clustering completed."))
}

# one hot encoding
m = nrow(X)
n = ncol(X)
fdom = colMaxs(X);
foffb = t(cumsum(t(fdom))) - fdom;
foffe = t(cumsum(t(fdom)))
rix = matrix(seq(1,m)%*%matrix(1,1,n), m*n, 1)
cix = matrix(X + foffb, m*n, 1);
X2 = table(rix, cix); #one-hot encoded

# print(toString(nrow(y)))
[Xtrain,Xtest,ytrain,ytest] = split(X=X2,Y=y, f=0.7)

# model = ffTrain(X=Xtrain, Y=ytrain, out_activation="sigmoid", loss_fcn="cel")
# yhat = ffPredict(model=model, X=Xtest)
# learn model

print(toString("Starting regression."))
B = multiLogReg(X=Xtrain, Y=ytrain, icpt=1, reg=0.00001, verbose=FALSE);
print(toString("Regression completed."))

[Matrix,yhat,acc] = multiLogRegPredict(X=Xtest, B=B, Y=ytest, verbose=FALSE);

e = (ytest!=yhat);
[conf_a, conf_r] = confusionMatrix(yhat,ytest)
# print(toString(conf_a))
precision = matrix(0, nrow(conf_a), 1)
recall = matrix(0, nrow(conf_a), 1)
f_score = matrix(0, nrow(conf_a), 1)
for(i in 1:ncol(conf_a)) {
#     print(toString(i))
    precision[i] = conf_a[i, i] / as.scalar(rowSums(conf_a[i,]))
    recall[i] = conf_a[i, i] / as.scalar(colSums(conf_a[,i]))
    f_score[i] = 2 * (recall[i] * precision[i]) / (recall[i] + precision[i])
}
stats = matrix(0, nrow(conf_a)+1, 4)
stats[2:nrow(conf_a)+1, 2] = precision
stats[2:nrow(conf_a)+1, 3] = recall
stats[2:nrow(conf_a)+1, 4] = f_score

#acc
stats[1,1] = 1 - (sum(e) / nrow(ytest))
#avg_precision
avg_precision = as.scalar(colSums(precision)) / nrow(precision)
stats[1,2] = avg_precision
#avg_recall
avg_recall = as.scalar(colSums(recall)) / nrow(recall)
stats[1,3] = avg_recall
#macro_f1
stats[1,4] = 2 * (avg_precision * avg_recall) / (avg_precision + avg_recall)


# print(toString(stats))
# e = (y!=yhat);

sample_size = 0 #nrow(X)
if(pq) {
out_file = "output/ml/PQ " + dataset + " " + M + " " + centroids + " " + sample_size + " " + sep
}
else {
out_file = "output/ml/Baseline " + dataset + " " + M + " " + centroids + " " + sample_size + " " + sep
}
# print(toString(out_file))
# print(toString(dataset))
# print(toString(M))
# print(toString(centroids))
# print(toString(sample_size))
# print(toString(sep))

# write(e, dir + dataset + "_e.csv", format="csv")
# write(acc, dir + dataset + "_acc.csv", format="csv")
# write(yhat, dir + dataset + "_yhat.csv", format="csv")
# write(stats, dir + dataset + "_stats.csv", format="csv")
res = stats[1,1:4]
write(res, out_file, format="csv")

# # learn model
# B = multiLogReg(X=X2, Y=y, icpt=1, reg=0.0001, verbose=TRUE);
# [M,yhat,acc] = multiLogRegPredict(X=X2, B=B, Y=y, verbose=TRUE);
# e = (y!=yhat);
#
#
# write(X, "data/Covtype_X.csv", format="csv")
# write(e, "data/Covtype_o_e.csv", format="csv")

# kdd98
# # learn model
# B = lm(X=X2, y=y, icpt=1, reg=0.0001, verbose=TRUE);
# yhat = X2 %*% B[1:ncol(X2),] + as.scalar(B[ncol(X)+1,]);
# e = (y-yhat)^2;
#
# write(X, "data/KDD98_X.csv", format="csv")
# write(e, "data/KDD98_o_e.csv", format="csv")
