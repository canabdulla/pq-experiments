M = $M
calc_distortion = $calc_dist
subcentroids = $subcentroids
dataset = $dataset
application = $application
pq = $pq
sep = $sep

if (application == "ann") {
    v = read("data/" + application + "/" + dataset + ".csv", format="csv")
}
else if (application == "ml") {
    v = read("data/" + application + "/" + dataset + "_X.csv")
}


rows=nrow(v)
cols=ncol(v)

if(pq) {
  #pad the data if columns are not divisible by M
  if(ncol(v) %% M != 0) {
      zeros = matrix(0, rows=nrow(v), cols= ((ncol(v) %/% M) +1) * M - ncol(v) )
      v = cbind(v, zeros)
      rows=nrow(v)
      cols=ncol(v)
  }
  #perform clustering
  print(toString("Starting Clustering with parameters: M=" + M + " subcentroids=" + subcentroids + " sep=" + sep))
  [codebook, codes] = quantizeByCluster(v, M, subcentroids, 1, 1000, 1e-8, (rows/subcentroids), sep, 2)
  print(toString("Clustering completed."))
}
else {
  print(toString("Starting Clustering with parameters: M=" + M + " centroids=" + subcentroids + " sep=" + sep))
  [codebook, codes] = kmeans(v, subcentroids, 1, 1000, 1e-8, FALSE, (rows/subcentroids), 2)
  print(toString("Clustering completed."))
}

result = matrix(0, rows=rows, cols=cols)

#todo: maybe integer division + throw error
subv = ncol(v) / M

#construct vectors from codes
if(pq) {
  if(calc_distortion) {
  parfor (i in 1:nrow(codes), check=0) {
    parfor (j in 1:ncol(codes), check=0) {
      result[i, 1 + (j-1)* subv: j * subv] = codebook[as.scalar(codes[i, j])]
    }
  }
}

}
else {
  parfor(i in 1:nrow(codes), check=0) {
    result[i,] = codebook[as.scalar(codes[i])]
  }
}

distortion = colSums(rowSums((v - result)^2)) / rows

if(pq) {
    out_file = "output/distortion/PQ " + dataset + " " + M + " " + subcentroids + " " + sep
}
else {
    out_file = "output/distortion/K-Means " + dataset + " " + M + " " + subcentroids + " " + sep
}
#existing = read(out_file, format="csv")
#distortion = rbind(existing, distortion)
write(distortion, out_file, format="csv", header=FALSE, sep=";")



